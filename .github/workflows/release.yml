name: Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version (ex: 1.0.0)'
        required: true
      nextSnapshotVersion:
        description: 'Next SNAPSHOT version (ex: 1.0.1-SNAPSHOT)'
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Print entered versions
        run: |
          echo "Release version: ${{ github.event.inputs.releaseVersion }}"
          echo "Next SNAPSHOT version: ${{ github.event.inputs.nextSnapshotVersion }}"
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to the Registry
        uses: docker/login-action@v3
        with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Creating release branch and publishing version to registry
        env:
          BUILD_ENV: 'github-actions'
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git checkout -b release/v${{ github.event.inputs.releaseVersion }}
          mvn -B versions:set -DnewVersion=${{ github.event.inputs.releaseVersion }} -DgenerateBackupPoms=false
          mvn -B deploy
          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          git commit -am 'Creating release version ${{ github.event.inputs.releaseVersion }}'
          git push origin release/v${{ github.event.inputs.releaseVersion }} --force
      - name:  Build and Push Docker Images to The container registry
        run: |
          VERSION=${{ github.event.inputs.releaseVersion }}
          MODULES=("event" "notification" "payment" "reservation")
            for module in "${MODULES[@]}"; do
                IMAGE=ghcr.io/zarayach/microservices-pfm/${module}:${VERSION}
                echo "Building and pushing $IMAGE"
                docker build -t $IMAGE ./$module --label built-by=github-actions --label build-version=$VERSION ./$module
                docker push $IMAGE
            done
      - name: Publishing release and tags in github
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.event.inputs.releaseVersion }}
          release_name: Release ${{ github.event.inputs.releaseVersion }}
          draft: false
          prerelease: false
      - name: Preparing next SNAPSHOT version for development
        env:
          BUILD_ENV: 'github-actions'
        run: |
          git checkout -b v${{ github.event.inputs.nextSnapshotVersion }}
          mvn -B versions:set -DnewVersion=${{ github.event.inputs.nextSnapshotVersion }} -DgenerateBackupPoms=false
          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          git commit -am 'Updating version to ${{ github.event.inputs.nextSnapshotVersion }}'
          git push origin v${{ github.event.inputs.nextSnapshotVersion }} --force
      - name: Creating pull request to merge to master
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "master"
          github_token: ${{ github.token }}
          source_branch: v${{ github.event.inputs.nextSnapshotVersion }}
          pr_title: "Merge v${{ github.event.inputs.nextSnapshotVersion }} into master"
          pr_body: |
            Hi!
            This PR was created in response release workflow running. 
            I've created release ${{ github.event.inputs.releaseVersion }}. 
            Updating master for next iteration version ${{ github.event.inputs.nextSnapshotVersion }}.
          pr_allow_empty: true
          pr_reviewer: ${{ github.actor }}
          pr_assignee: ${{ github.actor }}
          pr_label: "version update ðŸš€"
      - name: Clean up Docker images and containers
        run: |
          echo "Removing images labeled with built-by=github-actions"
          docker rmi -f $(docker images --filter "label=built-by=github-actions" --quiet) || true
          docker system prune --force
